// Read https://developers.google.com/protocol-buffers/docs/style

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

/**
Base model for messages or news, contains basic data like title, content, source, published date etc..
*/
message BaseModel {

    // unique identifier with schema
    string id = 1;

    // title of article
    string title = 2;

    // full content stripped of unnecessary characters(js, html tags...)
    string content = 3;

    //
    string crawler = 4;

    // timestamp representing the datetime, when the article has been published
    google.protobuf.Timestamp pub_date = 5;

    // timestamp representing acquisition datetime
    google.protobuf.Timestamp created = 6;

    // url of article
    string source = 7;

    // summary provided by the domain
    string excerpt = 8;

    // list of video sources
    repeated string videos = 9;

    // list of image sources
    repeated string images = 10;

    // list of off-page hyperlinks
    repeated string links = 11;

    // author of article
    string author = 12;

    // identified language
    string lang = 13;

    // importance of the article's creator
    double weight = 14;

    // measured spam value
    double spam = 15;

    string domain = 16;
}

/**
Group data that refers to sentiment of message
*/
message SentimentModel {
    // analyzed sentiment <-10, 10>
    double sentiment = 1;

    // analyzed impact in the respective area
    double market_impact = 2;

    // analyzed replies sentiment <-10, 10>
    double sentiment_replies = 3;
}

message CryptopanicEntrySource {
    string title = 1;
    string region = 2;
    string domain = 3;
    string path = 4;
}

message CryptopanicEntryVotes {
    int32 negative = 1;
    int32 positive = 2;
    int32 important = 3;
    int32 liked = 4;
    int32 disliked = 5;
    int32 lol = 6;
    int32 toxic = 7;
    int32 saved = 8;
}

message CryptopanicEntryMetadata {
    string message = 1;
    string description = 2;
}

message CryptopanicRawEntry {
    string kind = 1;
    string domain = 2;
    CryptopanicEntrySource source = 3;
    string title = 4;
    string published_at = 5;
    string slug = 6;
    int32 id = 7;
    string url = 8;
    string created_at = 9;
    CryptopanicEntryVotes votes = 10;
    CryptopanicEntryMetadata metadata = 11;
}

message CryptopanicFeed {
    int32 count = 1;
    repeated CryptopanicRawEntry results = 2;
}

message CryptopanicPost {
    CryptopanicRawEntry cryptopanic_raw_entry = 1;
    Article article = 2;
}

/**
Types of named entities
*/
enum NamedEntity {
    ASSET_ENTITY = 0;
    PERSON_ENTITY = 1;
    LOCATION_ENTITY = 2;
    COMPANY_ENTITY = 3;
    EXCHANGE_ENTITY = 4;
    MISC_ENTITY = 5;
    ORGANIZATION_ENTITY = 6;
}

/**
Occurrence od named entity.
contains position, matched text, category
*/
message NamedEntityOccurrence {
    // Represents NamedEntity element
    NamedEntity label = 1;

    // Start position of occurrence
    uint32 start = 2;

    // End position of occurrence
    uint32 end = 3;

    // Matched text
    string text = 4;
}

/**
Groups all types of named entities we support.
*/
message NamedEntitiesModel {
    // list of crypto assets
    repeated string symbols = 1;

    // recognized cryptocurrencies
    repeated NamedEntityOccurrence assets = 2;

    // recognized persons
    repeated NamedEntityOccurrence persons = 3;

    // recognized companies
    repeated NamedEntityOccurrence companies = 4;

    // recognized organizations
    repeated NamedEntityOccurrence organizations = 5;

    // recognized locations
    repeated NamedEntityOccurrence locations = 6;

    // recognized exchanges
    repeated NamedEntityOccurrence exchanges = 7;

    // recognized misc objects
    repeated NamedEntityOccurrence misc = 8;

    // list of assigned tags
    repeated string tags = 9;

    // mapped asset to its mention count
    map<string, int32> asset_mentions = 10;

    // cleaned text which uses NER
    string source_text = 11;
}

/**
Basic model for News, articles.
It's weight depends on Alexa ranks
*/
message Article {
    BaseModel base = 1;
    SentimentModel sentiment = 2;

    // named entities from content
    NamedEntitiesModel named_entities = 3;

    // named entities from title
    NamedEntitiesModel title_data = 4;
}

/**
Basic model for media where the messages are wrote by regular user
*/
message UserMessage {
    BaseModel base = 1;
    SentimentModel sentiment = 2;
    NamedEntitiesModel named_entities = 3;

    // nickname of user
    string user = 4;

    // text of message
    string message = 5;
}


/**
Sentiment message holds informations about aggregated sentiment for specific time window.
It is emitted every second for each asset and resolution. If your application needs to receive
sentiment updates for only one specific asset, it need to be filtered on your side .
*/
message SentimentCandle {
    // unique identifier
    string id = 1;

    // timestamp representing start of the time frame
    google.protobuf.Timestamp start_time = 2;

    // constant representing time frame width - M1 or H1
    string resolution = 3;

    // crypto asset
    string asset = 4;

    // sum of all negative values
    double negative_sum = 5;

    // counted negative occurrences
    int32 negative_count = 6;

    // sum of all positive values
    double positive_sum = 7;

    // counted positive occurrences
    int32 positive_count = 8;

    // average of sentiments
    double sentiment_avg = 9;

    // value of sentiment at the start of candle
    double open_sentiment_average = 10;

    // value of sentiment when the candle is highest
    double high_sentiment_average = 11;

    // value of sentiment when the candle is lowest
    double low_sentiment_average = 12;

    // value of sentiment at the end of candle
    double close_sentiment_average = 13;

    // flag the signalizes that candle was updated
    bool updated = 14;
}

/**
Service for entries streaming
*/
service MessagesProxy {
    rpc SubscribeBaseArticle (AssetsFilter) returns (stream PublicModel) {
    }
    rpc SubscribeArticle (AssetsFilter) returns (stream Article) {
    }

}

message AssetsFilter {
    // name of the asset - ie. BTC
    repeated string assets = 4;
    bool all_assets = 5;
}

message AggregationCandleFilter {
    // resolution for candle - M1/H1
    string resolution = 1;
    AssetsFilter assets_filter = 2;
}

/**
Each request for historic data should be limited by date
*/
message SentimentHistoricRequest {
    // unix timestamp for start - included in results (greater or equal)
    google.protobuf.Timestamp from = 1;
    // unix timestamp for end - excluded from results (
    google.protobuf.Timestamp to = 2;
    // resolution for candle - M1/H1
    string resolution = 3;
    // name of the asset - ie. BTC
    string asset = 4;
}

/**
Each request for historic data should be limited by date
*/
message HistoricRequest {
    // unix timestamp for start - included in results (greater or equal)
    google.protobuf.Timestamp from = 1;
    // unix timestamp for end - excluded from results (
    google.protobuf.Timestamp to = 2;
    AssetsFilter filter = 4;
}

/**
Represent one asset.
*/
message Asset {
    string name = 1;
    // symbol can be duplicated throughout the db
    string symbol = 2;
    // unique field
    string code = 3;
}
message AssetItems {
    repeated Asset assets = 1;
}

/**
Service for requesting data from dataset
*/
service Dataset {
    rpc Assets (google.protobuf.Empty) returns (AssetItems) {
    }
}

/**
Service for requesting historic data
*/
service HistoricData {
    rpc HistoricBaseArticles (HistoricRequest) returns (stream PublicModel) {
    }
    rpc HistoricArticles (HistoricRequest) returns (stream Article) {
    }

}

service Sentiments {
    rpc HistoricSocialSentiment (SentimentHistoricRequest) returns (stream AggregationCandle) {
    }
    rpc HistoricNewsSentiment (SentimentHistoricRequest) returns (stream AggregationCandle) {
    }
    rpc SubscribeSocialSentiment (AggregationCandleFilter) returns (stream AggregationCandle) {
    }
    rpc SubscribeNewsSentiment (AggregationCandleFilter) returns (stream AggregationCandle) {
    }
}

message Transaction {
    string id = 1;
    string hash = 2;
    string from_address = 3;
    string to_address = 4;
    string from_owner = 5;
    string to_owner = 6;
    google.protobuf.Timestamp time = 7;
    string comment = 8;
    string asset = 9;
    double size = 10;
    double USD_size = 11;
}

message AggId {
    int32 year = 1;
    int32 month = 2;
    int32 day = 3;
    int32 hour = 4;
    int32 minute = 5;
}

message AggregationCandle {
    AggId id = 1;
    string asset = 2;
    string resolution = 3;
    int64 pv = 4;
    int64 nv = 5;
    double ps = 6;
    double ns = 7;
    double a = 8;
}

message PublicModel {
    // unique identifier with schema
    string id = 1;

    // title of article
    string title = 2;

    // full content stripped of unnecessary characters(js, html tags...)
    string content = 3;

    // timestamp representing the datetime, when the article has been published
    google.protobuf.Timestamp pub_date = 5;

    // timestamp representing acquisition datetime
    google.protobuf.Timestamp created = 6;

    // url of article
    string source = 7;

    // summary provided by the domain
    string excerpt = 8;

    // list of video sources
    repeated string videos = 9;

    // list of image sources
    repeated string images = 10;

    // list of off-page hyperlinks
    repeated string links = 11;

    string domain = 16;

    // additional fields, for now available only 'assets'
    PublicModelExtensions extensions = 100;
}

// additional fields to public model
message PublicModelExtensions {
    // assets found in publication
    repeated string assets = 1;
}
