// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

package types

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
//Types of named entities
type NamedEntity int32

const (
	NamedEntity_ASSET_ENTITY        NamedEntity = 0
	NamedEntity_PERSON_ENTITY       NamedEntity = 1
	NamedEntity_LOCATION_ENTITY     NamedEntity = 2
	NamedEntity_COMPANY_ENTITY      NamedEntity = 3
	NamedEntity_EXCHANGE_ENTITY     NamedEntity = 4
	NamedEntity_MISC_ENTITY         NamedEntity = 5
	NamedEntity_ORGANIZATION_ENTITY NamedEntity = 6
)

var NamedEntity_name = map[int32]string{
	0: "ASSET_ENTITY",
	1: "PERSON_ENTITY",
	2: "LOCATION_ENTITY",
	3: "COMPANY_ENTITY",
	4: "EXCHANGE_ENTITY",
	5: "MISC_ENTITY",
	6: "ORGANIZATION_ENTITY",
}

var NamedEntity_value = map[string]int32{
	"ASSET_ENTITY":        0,
	"PERSON_ENTITY":       1,
	"LOCATION_ENTITY":     2,
	"COMPANY_ENTITY":      3,
	"EXCHANGE_ENTITY":     4,
	"MISC_ENTITY":         5,
	"ORGANIZATION_ENTITY": 6,
}

func (x NamedEntity) String() string {
	return proto.EnumName(NamedEntity_name, int32(x))
}

func (NamedEntity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}

//*
//Base model for messages or news, contains basic data like title, content, source, published date etc..
type BaseModel struct {
	// unique identifier with schema
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// title of article
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// full content stripped of unnecessary characters(js, html tags...)
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	//
	Crawler string `protobuf:"bytes,4,opt,name=crawler,proto3" json:"crawler,omitempty"`
	// timestamp representing the datetime, when the article has been published
	PubDate *timestamp.Timestamp `protobuf:"bytes,5,opt,name=pub_date,json=pubDate,proto3" json:"pub_date,omitempty"`
	// timestamp representing acquisition datetime
	Created *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	// url of article
	Source string `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	// summary provided by the domain
	Excerpt string `protobuf:"bytes,8,opt,name=excerpt,proto3" json:"excerpt,omitempty"`
	// list of video sources
	Videos []string `protobuf:"bytes,9,rep,name=videos,proto3" json:"videos,omitempty"`
	// list of image sources
	Images []string `protobuf:"bytes,10,rep,name=images,proto3" json:"images,omitempty"`
	// list of off-page hyperlinks
	Links []string `protobuf:"bytes,11,rep,name=links,proto3" json:"links,omitempty"`
	// author of article
	Author string `protobuf:"bytes,12,opt,name=author,proto3" json:"author,omitempty"`
	// identified language
	Lang string `protobuf:"bytes,13,opt,name=lang,proto3" json:"lang,omitempty"`
	// importance of the article's creator
	Weight float64 `protobuf:"fixed64,14,opt,name=weight,proto3" json:"weight,omitempty"`
	// measured spam value
	Spam                 float64  `protobuf:"fixed64,15,opt,name=spam,proto3" json:"spam,omitempty"`
	Domain               string   `protobuf:"bytes,16,opt,name=domain,proto3" json:"domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseModel) Reset()         { *m = BaseModel{} }
func (m *BaseModel) String() string { return proto.CompactTextString(m) }
func (*BaseModel) ProtoMessage()    {}
func (*BaseModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}

func (m *BaseModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaseModel.Unmarshal(m, b)
}
func (m *BaseModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaseModel.Marshal(b, m, deterministic)
}
func (m *BaseModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseModel.Merge(m, src)
}
func (m *BaseModel) XXX_Size() int {
	return xxx_messageInfo_BaseModel.Size(m)
}
func (m *BaseModel) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseModel.DiscardUnknown(m)
}

var xxx_messageInfo_BaseModel proto.InternalMessageInfo

func (m *BaseModel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BaseModel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BaseModel) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *BaseModel) GetCrawler() string {
	if m != nil {
		return m.Crawler
	}
	return ""
}

func (m *BaseModel) GetPubDate() *timestamp.Timestamp {
	if m != nil {
		return m.PubDate
	}
	return nil
}

func (m *BaseModel) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *BaseModel) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *BaseModel) GetExcerpt() string {
	if m != nil {
		return m.Excerpt
	}
	return ""
}

func (m *BaseModel) GetVideos() []string {
	if m != nil {
		return m.Videos
	}
	return nil
}

func (m *BaseModel) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *BaseModel) GetLinks() []string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *BaseModel) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *BaseModel) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *BaseModel) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *BaseModel) GetSpam() float64 {
	if m != nil {
		return m.Spam
	}
	return 0
}

func (m *BaseModel) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

//*
//Group data that refers to sentiment of message
type SentimentModel struct {
	// analyzed sentiment <-10, 10>
	Sentiment float64 `protobuf:"fixed64,1,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	// analyzed impact in the respective area
	MarketImpact float64 `protobuf:"fixed64,2,opt,name=market_impact,json=marketImpact,proto3" json:"market_impact,omitempty"`
	// analyzed replies sentiment <-10, 10>
	SentimentReplies     float64  `protobuf:"fixed64,3,opt,name=sentiment_replies,json=sentimentReplies,proto3" json:"sentiment_replies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SentimentModel) Reset()         { *m = SentimentModel{} }
func (m *SentimentModel) String() string { return proto.CompactTextString(m) }
func (*SentimentModel) ProtoMessage()    {}
func (*SentimentModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}

func (m *SentimentModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SentimentModel.Unmarshal(m, b)
}
func (m *SentimentModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SentimentModel.Marshal(b, m, deterministic)
}
func (m *SentimentModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentimentModel.Merge(m, src)
}
func (m *SentimentModel) XXX_Size() int {
	return xxx_messageInfo_SentimentModel.Size(m)
}
func (m *SentimentModel) XXX_DiscardUnknown() {
	xxx_messageInfo_SentimentModel.DiscardUnknown(m)
}

var xxx_messageInfo_SentimentModel proto.InternalMessageInfo

func (m *SentimentModel) GetSentiment() float64 {
	if m != nil {
		return m.Sentiment
	}
	return 0
}

func (m *SentimentModel) GetMarketImpact() float64 {
	if m != nil {
		return m.MarketImpact
	}
	return 0
}

func (m *SentimentModel) GetSentimentReplies() float64 {
	if m != nil {
		return m.SentimentReplies
	}
	return 0
}

type CryptopanicEntrySource struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Domain               string   `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Path                 string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CryptopanicEntrySource) Reset()         { *m = CryptopanicEntrySource{} }
func (m *CryptopanicEntrySource) String() string { return proto.CompactTextString(m) }
func (*CryptopanicEntrySource) ProtoMessage()    {}
func (*CryptopanicEntrySource) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2}
}

func (m *CryptopanicEntrySource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicEntrySource.Unmarshal(m, b)
}
func (m *CryptopanicEntrySource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicEntrySource.Marshal(b, m, deterministic)
}
func (m *CryptopanicEntrySource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicEntrySource.Merge(m, src)
}
func (m *CryptopanicEntrySource) XXX_Size() int {
	return xxx_messageInfo_CryptopanicEntrySource.Size(m)
}
func (m *CryptopanicEntrySource) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicEntrySource.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicEntrySource proto.InternalMessageInfo

func (m *CryptopanicEntrySource) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CryptopanicEntrySource) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CryptopanicEntrySource) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CryptopanicEntrySource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type CryptopanicEntryVotes struct {
	Negative             int32    `protobuf:"varint,1,opt,name=negative,proto3" json:"negative,omitempty"`
	Positive             int32    `protobuf:"varint,2,opt,name=positive,proto3" json:"positive,omitempty"`
	Important            int32    `protobuf:"varint,3,opt,name=important,proto3" json:"important,omitempty"`
	Liked                int32    `protobuf:"varint,4,opt,name=liked,proto3" json:"liked,omitempty"`
	Disliked             int32    `protobuf:"varint,5,opt,name=disliked,proto3" json:"disliked,omitempty"`
	Lol                  int32    `protobuf:"varint,6,opt,name=lol,proto3" json:"lol,omitempty"`
	Toxic                int32    `protobuf:"varint,7,opt,name=toxic,proto3" json:"toxic,omitempty"`
	Saved                int32    `protobuf:"varint,8,opt,name=saved,proto3" json:"saved,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CryptopanicEntryVotes) Reset()         { *m = CryptopanicEntryVotes{} }
func (m *CryptopanicEntryVotes) String() string { return proto.CompactTextString(m) }
func (*CryptopanicEntryVotes) ProtoMessage()    {}
func (*CryptopanicEntryVotes) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{3}
}

func (m *CryptopanicEntryVotes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicEntryVotes.Unmarshal(m, b)
}
func (m *CryptopanicEntryVotes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicEntryVotes.Marshal(b, m, deterministic)
}
func (m *CryptopanicEntryVotes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicEntryVotes.Merge(m, src)
}
func (m *CryptopanicEntryVotes) XXX_Size() int {
	return xxx_messageInfo_CryptopanicEntryVotes.Size(m)
}
func (m *CryptopanicEntryVotes) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicEntryVotes.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicEntryVotes proto.InternalMessageInfo

func (m *CryptopanicEntryVotes) GetNegative() int32 {
	if m != nil {
		return m.Negative
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetPositive() int32 {
	if m != nil {
		return m.Positive
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetImportant() int32 {
	if m != nil {
		return m.Important
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetLiked() int32 {
	if m != nil {
		return m.Liked
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetDisliked() int32 {
	if m != nil {
		return m.Disliked
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetLol() int32 {
	if m != nil {
		return m.Lol
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetToxic() int32 {
	if m != nil {
		return m.Toxic
	}
	return 0
}

func (m *CryptopanicEntryVotes) GetSaved() int32 {
	if m != nil {
		return m.Saved
	}
	return 0
}

type CryptopanicEntryMetadata struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CryptopanicEntryMetadata) Reset()         { *m = CryptopanicEntryMetadata{} }
func (m *CryptopanicEntryMetadata) String() string { return proto.CompactTextString(m) }
func (*CryptopanicEntryMetadata) ProtoMessage()    {}
func (*CryptopanicEntryMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{4}
}

func (m *CryptopanicEntryMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicEntryMetadata.Unmarshal(m, b)
}
func (m *CryptopanicEntryMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicEntryMetadata.Marshal(b, m, deterministic)
}
func (m *CryptopanicEntryMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicEntryMetadata.Merge(m, src)
}
func (m *CryptopanicEntryMetadata) XXX_Size() int {
	return xxx_messageInfo_CryptopanicEntryMetadata.Size(m)
}
func (m *CryptopanicEntryMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicEntryMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicEntryMetadata proto.InternalMessageInfo

func (m *CryptopanicEntryMetadata) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CryptopanicEntryMetadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CryptopanicRawEntry struct {
	Kind                 string                    `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Domain               string                    `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Source               *CryptopanicEntrySource   `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Title                string                    `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	PublishedAt          string                    `protobuf:"bytes,5,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	Slug                 string                    `protobuf:"bytes,6,opt,name=slug,proto3" json:"slug,omitempty"`
	Id                   int32                     `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	Url                  string                    `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	CreatedAt            string                    `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Votes                *CryptopanicEntryVotes    `protobuf:"bytes,10,opt,name=votes,proto3" json:"votes,omitempty"`
	Metadata             *CryptopanicEntryMetadata `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CryptopanicRawEntry) Reset()         { *m = CryptopanicRawEntry{} }
func (m *CryptopanicRawEntry) String() string { return proto.CompactTextString(m) }
func (*CryptopanicRawEntry) ProtoMessage()    {}
func (*CryptopanicRawEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{5}
}

func (m *CryptopanicRawEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicRawEntry.Unmarshal(m, b)
}
func (m *CryptopanicRawEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicRawEntry.Marshal(b, m, deterministic)
}
func (m *CryptopanicRawEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicRawEntry.Merge(m, src)
}
func (m *CryptopanicRawEntry) XXX_Size() int {
	return xxx_messageInfo_CryptopanicRawEntry.Size(m)
}
func (m *CryptopanicRawEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicRawEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicRawEntry proto.InternalMessageInfo

func (m *CryptopanicRawEntry) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *CryptopanicRawEntry) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CryptopanicRawEntry) GetSource() *CryptopanicEntrySource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CryptopanicRawEntry) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CryptopanicRawEntry) GetPublishedAt() string {
	if m != nil {
		return m.PublishedAt
	}
	return ""
}

func (m *CryptopanicRawEntry) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *CryptopanicRawEntry) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CryptopanicRawEntry) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CryptopanicRawEntry) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *CryptopanicRawEntry) GetVotes() *CryptopanicEntryVotes {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *CryptopanicRawEntry) GetMetadata() *CryptopanicEntryMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type CryptopanicFeed struct {
	Count                int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Results              []*CryptopanicRawEntry `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CryptopanicFeed) Reset()         { *m = CryptopanicFeed{} }
func (m *CryptopanicFeed) String() string { return proto.CompactTextString(m) }
func (*CryptopanicFeed) ProtoMessage()    {}
func (*CryptopanicFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{6}
}

func (m *CryptopanicFeed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicFeed.Unmarshal(m, b)
}
func (m *CryptopanicFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicFeed.Marshal(b, m, deterministic)
}
func (m *CryptopanicFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicFeed.Merge(m, src)
}
func (m *CryptopanicFeed) XXX_Size() int {
	return xxx_messageInfo_CryptopanicFeed.Size(m)
}
func (m *CryptopanicFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicFeed.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicFeed proto.InternalMessageInfo

func (m *CryptopanicFeed) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CryptopanicFeed) GetResults() []*CryptopanicRawEntry {
	if m != nil {
		return m.Results
	}
	return nil
}

type CryptopanicPost struct {
	CryptopanicRawEntry  *CryptopanicRawEntry `protobuf:"bytes,1,opt,name=cryptopanic_raw_entry,json=cryptopanicRawEntry,proto3" json:"cryptopanic_raw_entry,omitempty"`
	Article              *Article             `protobuf:"bytes,2,opt,name=article,proto3" json:"article,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CryptopanicPost) Reset()         { *m = CryptopanicPost{} }
func (m *CryptopanicPost) String() string { return proto.CompactTextString(m) }
func (*CryptopanicPost) ProtoMessage()    {}
func (*CryptopanicPost) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{7}
}

func (m *CryptopanicPost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CryptopanicPost.Unmarshal(m, b)
}
func (m *CryptopanicPost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CryptopanicPost.Marshal(b, m, deterministic)
}
func (m *CryptopanicPost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CryptopanicPost.Merge(m, src)
}
func (m *CryptopanicPost) XXX_Size() int {
	return xxx_messageInfo_CryptopanicPost.Size(m)
}
func (m *CryptopanicPost) XXX_DiscardUnknown() {
	xxx_messageInfo_CryptopanicPost.DiscardUnknown(m)
}

var xxx_messageInfo_CryptopanicPost proto.InternalMessageInfo

func (m *CryptopanicPost) GetCryptopanicRawEntry() *CryptopanicRawEntry {
	if m != nil {
		return m.CryptopanicRawEntry
	}
	return nil
}

func (m *CryptopanicPost) GetArticle() *Article {
	if m != nil {
		return m.Article
	}
	return nil
}

//*
//Occurrence od named entity.
//contains position, matched text, category
type NamedEntityOccurrence struct {
	// Represents NamedEntity element
	Label NamedEntity `protobuf:"varint,1,opt,name=label,proto3,enum=NamedEntity" json:"label,omitempty"`
	// Start position of occurrence
	Start uint32 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// End position of occurrence
	End uint32 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	// Matched text
	Text                 string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamedEntityOccurrence) Reset()         { *m = NamedEntityOccurrence{} }
func (m *NamedEntityOccurrence) String() string { return proto.CompactTextString(m) }
func (*NamedEntityOccurrence) ProtoMessage()    {}
func (*NamedEntityOccurrence) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{8}
}

func (m *NamedEntityOccurrence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamedEntityOccurrence.Unmarshal(m, b)
}
func (m *NamedEntityOccurrence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamedEntityOccurrence.Marshal(b, m, deterministic)
}
func (m *NamedEntityOccurrence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamedEntityOccurrence.Merge(m, src)
}
func (m *NamedEntityOccurrence) XXX_Size() int {
	return xxx_messageInfo_NamedEntityOccurrence.Size(m)
}
func (m *NamedEntityOccurrence) XXX_DiscardUnknown() {
	xxx_messageInfo_NamedEntityOccurrence.DiscardUnknown(m)
}

var xxx_messageInfo_NamedEntityOccurrence proto.InternalMessageInfo

func (m *NamedEntityOccurrence) GetLabel() NamedEntity {
	if m != nil {
		return m.Label
	}
	return NamedEntity_ASSET_ENTITY
}

func (m *NamedEntityOccurrence) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *NamedEntityOccurrence) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *NamedEntityOccurrence) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

//*
//Groups all types of named entities we support.
type NamedEntitiesModel struct {
	// list of crypto assets
	Symbols []string `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	// recognized cryptocurrencies
	Assets []*NamedEntityOccurrence `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	// recognized persons
	Persons []*NamedEntityOccurrence `protobuf:"bytes,3,rep,name=persons,proto3" json:"persons,omitempty"`
	// recognized companies
	Companies []*NamedEntityOccurrence `protobuf:"bytes,4,rep,name=companies,proto3" json:"companies,omitempty"`
	// recognized organizations
	Organizations []*NamedEntityOccurrence `protobuf:"bytes,5,rep,name=organizations,proto3" json:"organizations,omitempty"`
	// recognized locations
	Locations []*NamedEntityOccurrence `protobuf:"bytes,6,rep,name=locations,proto3" json:"locations,omitempty"`
	// recognized exchanges
	Exchanges []*NamedEntityOccurrence `protobuf:"bytes,7,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
	// recognized misc objects
	Misc []*NamedEntityOccurrence `protobuf:"bytes,8,rep,name=misc,proto3" json:"misc,omitempty"`
	// list of assigned tags
	Tags []string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// mapped asset to its mention count
	AssetMentions map[string]int32 `protobuf:"bytes,10,rep,name=asset_mentions,json=assetMentions,proto3" json:"asset_mentions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// cleaned text which uses NER
	SourceText           string   `protobuf:"bytes,11,opt,name=source_text,json=sourceText,proto3" json:"source_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamedEntitiesModel) Reset()         { *m = NamedEntitiesModel{} }
func (m *NamedEntitiesModel) String() string { return proto.CompactTextString(m) }
func (*NamedEntitiesModel) ProtoMessage()    {}
func (*NamedEntitiesModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{9}
}

func (m *NamedEntitiesModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamedEntitiesModel.Unmarshal(m, b)
}
func (m *NamedEntitiesModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamedEntitiesModel.Marshal(b, m, deterministic)
}
func (m *NamedEntitiesModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamedEntitiesModel.Merge(m, src)
}
func (m *NamedEntitiesModel) XXX_Size() int {
	return xxx_messageInfo_NamedEntitiesModel.Size(m)
}
func (m *NamedEntitiesModel) XXX_DiscardUnknown() {
	xxx_messageInfo_NamedEntitiesModel.DiscardUnknown(m)
}

var xxx_messageInfo_NamedEntitiesModel proto.InternalMessageInfo

func (m *NamedEntitiesModel) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *NamedEntitiesModel) GetAssets() []*NamedEntityOccurrence {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *NamedEntitiesModel) GetPersons() []*NamedEntityOccurrence {
	if m != nil {
		return m.Persons
	}
	return nil
}

func (m *NamedEntitiesModel) GetCompanies() []*NamedEntityOccurrence {
	if m != nil {
		return m.Companies
	}
	return nil
}

func (m *NamedEntitiesModel) GetOrganizations() []*NamedEntityOccurrence {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func (m *NamedEntitiesModel) GetLocations() []*NamedEntityOccurrence {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *NamedEntitiesModel) GetExchanges() []*NamedEntityOccurrence {
	if m != nil {
		return m.Exchanges
	}
	return nil
}

func (m *NamedEntitiesModel) GetMisc() []*NamedEntityOccurrence {
	if m != nil {
		return m.Misc
	}
	return nil
}

func (m *NamedEntitiesModel) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *NamedEntitiesModel) GetAssetMentions() map[string]int32 {
	if m != nil {
		return m.AssetMentions
	}
	return nil
}

func (m *NamedEntitiesModel) GetSourceText() string {
	if m != nil {
		return m.SourceText
	}
	return ""
}

//*
//Basic model for News, articles.
//It's weight depends on Alexa ranks
type Article struct {
	Base      *BaseModel      `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Sentiment *SentimentModel `protobuf:"bytes,2,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	// named entities from content
	NamedEntities *NamedEntitiesModel `protobuf:"bytes,3,opt,name=named_entities,json=namedEntities,proto3" json:"named_entities,omitempty"`
	// named entities from title
	TitleData            *NamedEntitiesModel `protobuf:"bytes,4,opt,name=title_data,json=titleData,proto3" json:"title_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Article) Reset()         { *m = Article{} }
func (m *Article) String() string { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()    {}
func (*Article) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{10}
}

func (m *Article) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Article.Unmarshal(m, b)
}
func (m *Article) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Article.Marshal(b, m, deterministic)
}
func (m *Article) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Article.Merge(m, src)
}
func (m *Article) XXX_Size() int {
	return xxx_messageInfo_Article.Size(m)
}
func (m *Article) XXX_DiscardUnknown() {
	xxx_messageInfo_Article.DiscardUnknown(m)
}

var xxx_messageInfo_Article proto.InternalMessageInfo

func (m *Article) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Article) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *Article) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

func (m *Article) GetTitleData() *NamedEntitiesModel {
	if m != nil {
		return m.TitleData
	}
	return nil
}

//*
//Basic model for media where the messages are wrote by regular user
type UserMessage struct {
	Base          *BaseModel          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Sentiment     *SentimentModel     `protobuf:"bytes,2,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	NamedEntities *NamedEntitiesModel `protobuf:"bytes,3,opt,name=named_entities,json=namedEntities,proto3" json:"named_entities,omitempty"`
	// nickname of user
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// text of message
	Message              string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMessage) Reset()         { *m = UserMessage{} }
func (m *UserMessage) String() string { return proto.CompactTextString(m) }
func (*UserMessage) ProtoMessage()    {}
func (*UserMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{11}
}

func (m *UserMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserMessage.Unmarshal(m, b)
}
func (m *UserMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserMessage.Marshal(b, m, deterministic)
}
func (m *UserMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMessage.Merge(m, src)
}
func (m *UserMessage) XXX_Size() int {
	return xxx_messageInfo_UserMessage.Size(m)
}
func (m *UserMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UserMessage proto.InternalMessageInfo

func (m *UserMessage) GetBase() *BaseModel {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *UserMessage) GetSentiment() *SentimentModel {
	if m != nil {
		return m.Sentiment
	}
	return nil
}

func (m *UserMessage) GetNamedEntities() *NamedEntitiesModel {
	if m != nil {
		return m.NamedEntities
	}
	return nil
}

func (m *UserMessage) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//*
//Sentiment message holds informations about aggregated sentiment for specific time window.
//It is emitted every second for each asset and resolution. If your application needs to receive
//sentiment updates for only one specific asset, it need to be filtered on your side .
type SentimentCandle struct {
	// unique identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// timestamp representing start of the time frame
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// constant representing time frame width - M1 or H1
	Resolution string `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// crypto asset
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// sum of all negative values
	NegativeSum float64 `protobuf:"fixed64,5,opt,name=negative_sum,json=negativeSum,proto3" json:"negative_sum,omitempty"`
	// counted negative occurrences
	NegativeCount int32 `protobuf:"varint,6,opt,name=negative_count,json=negativeCount,proto3" json:"negative_count,omitempty"`
	// sum of all positive values
	PositiveSum float64 `protobuf:"fixed64,7,opt,name=positive_sum,json=positiveSum,proto3" json:"positive_sum,omitempty"`
	// counted positive occurrences
	PositiveCount int32 `protobuf:"varint,8,opt,name=positive_count,json=positiveCount,proto3" json:"positive_count,omitempty"`
	// average of sentiments
	SentimentAvg float64 `protobuf:"fixed64,9,opt,name=sentiment_avg,json=sentimentAvg,proto3" json:"sentiment_avg,omitempty"`
	// value of sentiment at the start of candle
	OpenSentimentAverage float64 `protobuf:"fixed64,10,opt,name=open_sentiment_average,json=openSentimentAverage,proto3" json:"open_sentiment_average,omitempty"`
	// value of sentiment when the candle is highest
	HighSentimentAverage float64 `protobuf:"fixed64,11,opt,name=high_sentiment_average,json=highSentimentAverage,proto3" json:"high_sentiment_average,omitempty"`
	// value of sentiment when the candle is lowest
	LowSentimentAverage float64 `protobuf:"fixed64,12,opt,name=low_sentiment_average,json=lowSentimentAverage,proto3" json:"low_sentiment_average,omitempty"`
	// value of sentiment at the end of candle
	CloseSentimentAverage float64 `protobuf:"fixed64,13,opt,name=close_sentiment_average,json=closeSentimentAverage,proto3" json:"close_sentiment_average,omitempty"`
	// flag the signalizes that candle was updated
	Updated              bool     `protobuf:"varint,14,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SentimentCandle) Reset()         { *m = SentimentCandle{} }
func (m *SentimentCandle) String() string { return proto.CompactTextString(m) }
func (*SentimentCandle) ProtoMessage()    {}
func (*SentimentCandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{12}
}

func (m *SentimentCandle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SentimentCandle.Unmarshal(m, b)
}
func (m *SentimentCandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SentimentCandle.Marshal(b, m, deterministic)
}
func (m *SentimentCandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentimentCandle.Merge(m, src)
}
func (m *SentimentCandle) XXX_Size() int {
	return xxx_messageInfo_SentimentCandle.Size(m)
}
func (m *SentimentCandle) XXX_DiscardUnknown() {
	xxx_messageInfo_SentimentCandle.DiscardUnknown(m)
}

var xxx_messageInfo_SentimentCandle proto.InternalMessageInfo

func (m *SentimentCandle) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SentimentCandle) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *SentimentCandle) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *SentimentCandle) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *SentimentCandle) GetNegativeSum() float64 {
	if m != nil {
		return m.NegativeSum
	}
	return 0
}

func (m *SentimentCandle) GetNegativeCount() int32 {
	if m != nil {
		return m.NegativeCount
	}
	return 0
}

func (m *SentimentCandle) GetPositiveSum() float64 {
	if m != nil {
		return m.PositiveSum
	}
	return 0
}

func (m *SentimentCandle) GetPositiveCount() int32 {
	if m != nil {
		return m.PositiveCount
	}
	return 0
}

func (m *SentimentCandle) GetSentimentAvg() float64 {
	if m != nil {
		return m.SentimentAvg
	}
	return 0
}

func (m *SentimentCandle) GetOpenSentimentAverage() float64 {
	if m != nil {
		return m.OpenSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetHighSentimentAverage() float64 {
	if m != nil {
		return m.HighSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetLowSentimentAverage() float64 {
	if m != nil {
		return m.LowSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetCloseSentimentAverage() float64 {
	if m != nil {
		return m.CloseSentimentAverage
	}
	return 0
}

func (m *SentimentCandle) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

type AssetsFilter struct {
	// name of the asset - ie. BTC
	Assets               []string `protobuf:"bytes,4,rep,name=assets,proto3" json:"assets,omitempty"`
	AllAssets            bool     `protobuf:"varint,5,opt,name=all_assets,json=allAssets,proto3" json:"all_assets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetsFilter) Reset()         { *m = AssetsFilter{} }
func (m *AssetsFilter) String() string { return proto.CompactTextString(m) }
func (*AssetsFilter) ProtoMessage()    {}
func (*AssetsFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{13}
}

func (m *AssetsFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetsFilter.Unmarshal(m, b)
}
func (m *AssetsFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetsFilter.Marshal(b, m, deterministic)
}
func (m *AssetsFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetsFilter.Merge(m, src)
}
func (m *AssetsFilter) XXX_Size() int {
	return xxx_messageInfo_AssetsFilter.Size(m)
}
func (m *AssetsFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetsFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AssetsFilter proto.InternalMessageInfo

func (m *AssetsFilter) GetAssets() []string {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *AssetsFilter) GetAllAssets() bool {
	if m != nil {
		return m.AllAssets
	}
	return false
}

type AggregationCandleFilter struct {
	// resolution for candle - M1/H1
	Resolution           string        `protobuf:"bytes,1,opt,name=resolution,proto3" json:"resolution,omitempty"`
	AssetsFilter         *AssetsFilter `protobuf:"bytes,2,opt,name=assets_filter,json=assetsFilter,proto3" json:"assets_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AggregationCandleFilter) Reset()         { *m = AggregationCandleFilter{} }
func (m *AggregationCandleFilter) String() string { return proto.CompactTextString(m) }
func (*AggregationCandleFilter) ProtoMessage()    {}
func (*AggregationCandleFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{14}
}

func (m *AggregationCandleFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregationCandleFilter.Unmarshal(m, b)
}
func (m *AggregationCandleFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregationCandleFilter.Marshal(b, m, deterministic)
}
func (m *AggregationCandleFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregationCandleFilter.Merge(m, src)
}
func (m *AggregationCandleFilter) XXX_Size() int {
	return xxx_messageInfo_AggregationCandleFilter.Size(m)
}
func (m *AggregationCandleFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregationCandleFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AggregationCandleFilter proto.InternalMessageInfo

func (m *AggregationCandleFilter) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *AggregationCandleFilter) GetAssetsFilter() *AssetsFilter {
	if m != nil {
		return m.AssetsFilter
	}
	return nil
}

//*
//Each request for historic data should be limited by date
type SentimentHistoricRequest struct {
	// unix timestamp for start - included in results (greater or equal)
	From *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// unix timestamp for end - excluded from results (
	To *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// resolution for candle - M1/H1
	Resolution string `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// name of the asset - ie. BTC
	Asset                string   `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SentimentHistoricRequest) Reset()         { *m = SentimentHistoricRequest{} }
func (m *SentimentHistoricRequest) String() string { return proto.CompactTextString(m) }
func (*SentimentHistoricRequest) ProtoMessage()    {}
func (*SentimentHistoricRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{15}
}

func (m *SentimentHistoricRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SentimentHistoricRequest.Unmarshal(m, b)
}
func (m *SentimentHistoricRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SentimentHistoricRequest.Marshal(b, m, deterministic)
}
func (m *SentimentHistoricRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentimentHistoricRequest.Merge(m, src)
}
func (m *SentimentHistoricRequest) XXX_Size() int {
	return xxx_messageInfo_SentimentHistoricRequest.Size(m)
}
func (m *SentimentHistoricRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SentimentHistoricRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SentimentHistoricRequest proto.InternalMessageInfo

func (m *SentimentHistoricRequest) GetFrom() *timestamp.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SentimentHistoricRequest) GetTo() *timestamp.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SentimentHistoricRequest) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *SentimentHistoricRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

//*
//Each request for historic data should be limited by date
type HistoricRequest struct {
	// unix timestamp for start - included in results (greater or equal)
	From *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// unix timestamp for end - excluded from results (
	To                   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Filter               *AssetsFilter        `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *HistoricRequest) Reset()         { *m = HistoricRequest{} }
func (m *HistoricRequest) String() string { return proto.CompactTextString(m) }
func (*HistoricRequest) ProtoMessage()    {}
func (*HistoricRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{16}
}

func (m *HistoricRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoricRequest.Unmarshal(m, b)
}
func (m *HistoricRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoricRequest.Marshal(b, m, deterministic)
}
func (m *HistoricRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricRequest.Merge(m, src)
}
func (m *HistoricRequest) XXX_Size() int {
	return xxx_messageInfo_HistoricRequest.Size(m)
}
func (m *HistoricRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricRequest proto.InternalMessageInfo

func (m *HistoricRequest) GetFrom() *timestamp.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *HistoricRequest) GetTo() *timestamp.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *HistoricRequest) GetFilter() *AssetsFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

//*
//Represent one asset.
type Asset struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// symbol can be duplicated throughout the db
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// unique field
	Code                 string   `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{17}
}

func (m *Asset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Asset.Unmarshal(m, b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return xxx_messageInfo_Asset.Size(m)
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Asset) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Asset) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type AssetItems struct {
	Assets               []*Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssetItems) Reset()         { *m = AssetItems{} }
func (m *AssetItems) String() string { return proto.CompactTextString(m) }
func (*AssetItems) ProtoMessage()    {}
func (*AssetItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{18}
}

func (m *AssetItems) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssetItems.Unmarshal(m, b)
}
func (m *AssetItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssetItems.Marshal(b, m, deterministic)
}
func (m *AssetItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetItems.Merge(m, src)
}
func (m *AssetItems) XXX_Size() int {
	return xxx_messageInfo_AssetItems.Size(m)
}
func (m *AssetItems) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetItems.DiscardUnknown(m)
}

var xxx_messageInfo_AssetItems proto.InternalMessageInfo

func (m *AssetItems) GetAssets() []*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

type Transaction struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hash                 string               `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	FromAddress          string               `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress            string               `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	FromOwner            string               `protobuf:"bytes,5,opt,name=from_owner,json=fromOwner,proto3" json:"from_owner,omitempty"`
	ToOwner              string               `protobuf:"bytes,6,opt,name=to_owner,json=toOwner,proto3" json:"to_owner,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	Comment              string               `protobuf:"bytes,8,opt,name=comment,proto3" json:"comment,omitempty"`
	Asset                string               `protobuf:"bytes,9,opt,name=asset,proto3" json:"asset,omitempty"`
	Size                 float64              `protobuf:"fixed64,10,opt,name=size,proto3" json:"size,omitempty"`
	USDSize              float64              `protobuf:"fixed64,11,opt,name=USD_size,json=USDSize,proto3" json:"USD_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{19}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Transaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Transaction) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *Transaction) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *Transaction) GetFromOwner() string {
	if m != nil {
		return m.FromOwner
	}
	return ""
}

func (m *Transaction) GetToOwner() string {
	if m != nil {
		return m.ToOwner
	}
	return ""
}

func (m *Transaction) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Transaction) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Transaction) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *Transaction) GetSize() float64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Transaction) GetUSDSize() float64 {
	if m != nil {
		return m.USDSize
	}
	return 0
}

type AggId struct {
	Year                 int32    `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month                int32    `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day                  int32    `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	Hour                 int32    `protobuf:"varint,4,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute               int32    `protobuf:"varint,5,opt,name=minute,proto3" json:"minute,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AggId) Reset()         { *m = AggId{} }
func (m *AggId) String() string { return proto.CompactTextString(m) }
func (*AggId) ProtoMessage()    {}
func (*AggId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{20}
}

func (m *AggId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggId.Unmarshal(m, b)
}
func (m *AggId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggId.Marshal(b, m, deterministic)
}
func (m *AggId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggId.Merge(m, src)
}
func (m *AggId) XXX_Size() int {
	return xxx_messageInfo_AggId.Size(m)
}
func (m *AggId) XXX_DiscardUnknown() {
	xxx_messageInfo_AggId.DiscardUnknown(m)
}

var xxx_messageInfo_AggId proto.InternalMessageInfo

func (m *AggId) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *AggId) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *AggId) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *AggId) GetHour() int32 {
	if m != nil {
		return m.Hour
	}
	return 0
}

func (m *AggId) GetMinute() int32 {
	if m != nil {
		return m.Minute
	}
	return 0
}

type AggregationCandle struct {
	Id                   *AggId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Asset                string   `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Resolution           string   `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	Pv                   int64    `protobuf:"varint,4,opt,name=pv,proto3" json:"pv,omitempty"`
	Nv                   int64    `protobuf:"varint,5,opt,name=nv,proto3" json:"nv,omitempty"`
	Ps                   float64  `protobuf:"fixed64,6,opt,name=ps,proto3" json:"ps,omitempty"`
	Ns                   float64  `protobuf:"fixed64,7,opt,name=ns,proto3" json:"ns,omitempty"`
	A                    float64  `protobuf:"fixed64,8,opt,name=a,proto3" json:"a,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AggregationCandle) Reset()         { *m = AggregationCandle{} }
func (m *AggregationCandle) String() string { return proto.CompactTextString(m) }
func (*AggregationCandle) ProtoMessage()    {}
func (*AggregationCandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{21}
}

func (m *AggregationCandle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregationCandle.Unmarshal(m, b)
}
func (m *AggregationCandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregationCandle.Marshal(b, m, deterministic)
}
func (m *AggregationCandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregationCandle.Merge(m, src)
}
func (m *AggregationCandle) XXX_Size() int {
	return xxx_messageInfo_AggregationCandle.Size(m)
}
func (m *AggregationCandle) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregationCandle.DiscardUnknown(m)
}

var xxx_messageInfo_AggregationCandle proto.InternalMessageInfo

func (m *AggregationCandle) GetId() *AggId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AggregationCandle) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *AggregationCandle) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *AggregationCandle) GetPv() int64 {
	if m != nil {
		return m.Pv
	}
	return 0
}

func (m *AggregationCandle) GetNv() int64 {
	if m != nil {
		return m.Nv
	}
	return 0
}

func (m *AggregationCandle) GetPs() float64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

func (m *AggregationCandle) GetNs() float64 {
	if m != nil {
		return m.Ns
	}
	return 0
}

func (m *AggregationCandle) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

type PublicModel struct {
	// unique identifier with schema
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// title of article
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// full content stripped of unnecessary characters(js, html tags...)
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// timestamp representing the datetime, when the article has been published
	PubDate *timestamp.Timestamp `protobuf:"bytes,5,opt,name=pub_date,json=pubDate,proto3" json:"pub_date,omitempty"`
	// timestamp representing acquisition datetime
	Created *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	// url of article
	Source string `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	// summary provided by the domain
	Excerpt string `protobuf:"bytes,8,opt,name=excerpt,proto3" json:"excerpt,omitempty"`
	// list of video sources
	Videos []string `protobuf:"bytes,9,rep,name=videos,proto3" json:"videos,omitempty"`
	// list of image sources
	Images []string `protobuf:"bytes,10,rep,name=images,proto3" json:"images,omitempty"`
	// list of off-page hyperlinks
	Links  []string `protobuf:"bytes,11,rep,name=links,proto3" json:"links,omitempty"`
	Domain string   `protobuf:"bytes,16,opt,name=domain,proto3" json:"domain,omitempty"`
	// additional fields, for now available only 'assets'
	Extensions           *PublicModelExtensions `protobuf:"bytes,100,opt,name=extensions,proto3" json:"extensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PublicModel) Reset()         { *m = PublicModel{} }
func (m *PublicModel) String() string { return proto.CompactTextString(m) }
func (*PublicModel) ProtoMessage()    {}
func (*PublicModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{22}
}

func (m *PublicModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicModel.Unmarshal(m, b)
}
func (m *PublicModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicModel.Marshal(b, m, deterministic)
}
func (m *PublicModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicModel.Merge(m, src)
}
func (m *PublicModel) XXX_Size() int {
	return xxx_messageInfo_PublicModel.Size(m)
}
func (m *PublicModel) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicModel.DiscardUnknown(m)
}

var xxx_messageInfo_PublicModel proto.InternalMessageInfo

func (m *PublicModel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PublicModel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PublicModel) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *PublicModel) GetPubDate() *timestamp.Timestamp {
	if m != nil {
		return m.PubDate
	}
	return nil
}

func (m *PublicModel) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *PublicModel) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *PublicModel) GetExcerpt() string {
	if m != nil {
		return m.Excerpt
	}
	return ""
}

func (m *PublicModel) GetVideos() []string {
	if m != nil {
		return m.Videos
	}
	return nil
}

func (m *PublicModel) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *PublicModel) GetLinks() []string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *PublicModel) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *PublicModel) GetExtensions() *PublicModelExtensions {
	if m != nil {
		return m.Extensions
	}
	return nil
}

// additional fields to public model
type PublicModelExtensions struct {
	// assets found in publication
	Assets               []string `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicModelExtensions) Reset()         { *m = PublicModelExtensions{} }
func (m *PublicModelExtensions) String() string { return proto.CompactTextString(m) }
func (*PublicModelExtensions) ProtoMessage()    {}
func (*PublicModelExtensions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{23}
}

func (m *PublicModelExtensions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicModelExtensions.Unmarshal(m, b)
}
func (m *PublicModelExtensions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicModelExtensions.Marshal(b, m, deterministic)
}
func (m *PublicModelExtensions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicModelExtensions.Merge(m, src)
}
func (m *PublicModelExtensions) XXX_Size() int {
	return xxx_messageInfo_PublicModelExtensions.Size(m)
}
func (m *PublicModelExtensions) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicModelExtensions.DiscardUnknown(m)
}

var xxx_messageInfo_PublicModelExtensions proto.InternalMessageInfo

func (m *PublicModelExtensions) GetAssets() []string {
	if m != nil {
		return m.Assets
	}
	return nil
}

func init() {
	proto.RegisterEnum("NamedEntity", NamedEntity_name, NamedEntity_value)
	proto.RegisterType((*BaseModel)(nil), "BaseModel")
	proto.RegisterType((*SentimentModel)(nil), "SentimentModel")
	proto.RegisterType((*CryptopanicEntrySource)(nil), "CryptopanicEntrySource")
	proto.RegisterType((*CryptopanicEntryVotes)(nil), "CryptopanicEntryVotes")
	proto.RegisterType((*CryptopanicEntryMetadata)(nil), "CryptopanicEntryMetadata")
	proto.RegisterType((*CryptopanicRawEntry)(nil), "CryptopanicRawEntry")
	proto.RegisterType((*CryptopanicFeed)(nil), "CryptopanicFeed")
	proto.RegisterType((*CryptopanicPost)(nil), "CryptopanicPost")
	proto.RegisterType((*NamedEntityOccurrence)(nil), "NamedEntityOccurrence")
	proto.RegisterType((*NamedEntitiesModel)(nil), "NamedEntitiesModel")
	proto.RegisterMapType((map[string]int32)(nil), "NamedEntitiesModel.AssetMentionsEntry")
	proto.RegisterType((*Article)(nil), "Article")
	proto.RegisterType((*UserMessage)(nil), "UserMessage")
	proto.RegisterType((*SentimentCandle)(nil), "SentimentCandle")
	proto.RegisterType((*AssetsFilter)(nil), "AssetsFilter")
	proto.RegisterType((*AggregationCandleFilter)(nil), "AggregationCandleFilter")
	proto.RegisterType((*SentimentHistoricRequest)(nil), "SentimentHistoricRequest")
	proto.RegisterType((*HistoricRequest)(nil), "HistoricRequest")
	proto.RegisterType((*Asset)(nil), "Asset")
	proto.RegisterType((*AssetItems)(nil), "AssetItems")
	proto.RegisterType((*Transaction)(nil), "Transaction")
	proto.RegisterType((*AggId)(nil), "AggId")
	proto.RegisterType((*AggregationCandle)(nil), "AggregationCandle")
	proto.RegisterType((*PublicModel)(nil), "PublicModel")
	proto.RegisterType((*PublicModelExtensions)(nil), "PublicModelExtensions")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 2118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x38, 0x5f, 0x6f, 0x1c, 0x49,
	0xf1, 0x99, 0xfd, 0xe3, 0xf5, 0xd6, 0xee, 0xda, 0x4e, 0x3b, 0x76, 0x26, 0xfe, 0xfd, 0x2e, 0x67,
	0xe6, 0x74, 0x28, 0x0a, 0xc7, 0xf8, 0xb4, 0x84, 0x03, 0x22, 0x1e, 0x58, 0x1c, 0x5f, 0x62, 0x14,
	0xdb, 0xd1, 0xac, 0x73, 0x70, 0xbc, 0xac, 0xda, 0x33, 0x9d, 0xf5, 0x28, 0x33, 0xd3, 0xc3, 0x74,
	0x8f, 0xed, 0xcd, 0x03, 0x20, 0x3e, 0x03, 0x4f, 0x7c, 0x06, 0x24, 0xde, 0x11, 0x48, 0x3c, 0x21,
	0xbe, 0x04, 0x2f, 0x48, 0x7c, 0x0f, 0xd4, 0xd5, 0xdd, 0xb3, 0x63, 0x7b, 0xed, 0xf0, 0x4f, 0x08,
	0x89, 0xb7, 0xfa, 0xdf, 0xd5, 0x55, 0xd5, 0x55, 0x35, 0x03, 0x3d, 0x39, 0xcb, 0x99, 0xf0, 0xf3,
	0x82, 0x4b, 0xbe, 0xf5, 0xe1, 0x94, 0xf3, 0x69, 0xc2, 0x76, 0x10, 0x3b, 0x29, 0xdf, 0xec, 0xc8,
	0x38, 0x65, 0x42, 0xd2, 0x34, 0x37, 0x02, 0xff, 0x77, 0x55, 0x80, 0xa5, 0xb9, 0x9c, 0x69, 0xa6,
	0xf7, 0xdb, 0x26, 0x74, 0xbf, 0x4f, 0x05, 0x3b, 0xe0, 0x11, 0x4b, 0xc8, 0x0a, 0x34, 0xe2, 0xc8,
	0x75, 0xb6, 0x9d, 0x47, 0xdd, 0xa0, 0x11, 0x47, 0xe4, 0x1e, 0xb4, 0x65, 0x2c, 0x13, 0xe6, 0x36,
	0x90, 0xa4, 0x11, 0xe2, 0x42, 0x27, 0xe4, 0x99, 0x64, 0x99, 0x74, 0x9b, 0x48, 0xb7, 0x28, 0x72,
	0x0a, 0x7a, 0x9e, 0xb0, 0xc2, 0x6d, 0x19, 0x8e, 0x46, 0xc9, 0x37, 0x61, 0x39, 0x2f, 0x4f, 0x26,
	0x11, 0x95, 0xcc, 0x6d, 0x6f, 0x3b, 0x8f, 0x7a, 0xc3, 0x2d, 0x5f, 0xfb, 0xe5, 0x5b, 0xbf, 0xfc,
	0x63, 0xeb, 0x78, 0xd0, 0xc9, 0xcb, 0x93, 0x67, 0x54, 0x32, 0xf2, 0x44, 0x19, 0x64, 0x54, 0xb2,
	0xc8, 0x5d, 0x7a, 0xbf, 0x96, 0x11, 0x25, 0x9b, 0xb0, 0x24, 0x78, 0x59, 0x84, 0xcc, 0xed, 0xa0,
	0x17, 0x06, 0x53, 0xee, 0xb1, 0x8b, 0x90, 0x15, 0xb9, 0x74, 0x97, 0xb5, 0x7b, 0x06, 0x55, 0x1a,
	0x67, 0x71, 0xc4, 0xb8, 0x70, 0xbb, 0xdb, 0x4d, 0xa5, 0xa1, 0x31, 0x45, 0x8f, 0x53, 0x3a, 0x65,
	0xc2, 0x05, 0x4d, 0xd7, 0x98, 0x0a, 0x4c, 0x12, 0x67, 0x6f, 0x85, 0xdb, 0x43, 0xb2, 0x46, 0x94,
	0x34, 0x2d, 0xe5, 0x29, 0x2f, 0xdc, 0xbe, 0x3e, 0x57, 0x63, 0x84, 0x40, 0x2b, 0xa1, 0xd9, 0xd4,
	0x1d, 0x20, 0x15, 0x61, 0x25, 0x7b, 0xce, 0xe2, 0xe9, 0xa9, 0x74, 0x57, 0xb6, 0x9d, 0x47, 0x4e,
	0x60, 0x30, 0x25, 0x2b, 0x72, 0x9a, 0xba, 0xab, 0x48, 0x45, 0x58, 0xc9, 0x46, 0x3c, 0xa5, 0x71,
	0xe6, 0xae, 0x69, 0xbb, 0x1a, 0xf3, 0x7e, 0xee, 0xc0, 0xca, 0x98, 0x65, 0x2a, 0xe1, 0x99, 0xd4,
	0x19, 0xfc, 0x7f, 0xe8, 0x0a, 0x4b, 0xc1, 0x44, 0x3a, 0xc1, 0x9c, 0x40, 0x3e, 0x82, 0x41, 0x4a,
	0x8b, 0xb7, 0x4c, 0x4e, 0xe2, 0x34, 0xa7, 0xa1, 0xc4, 0xbc, 0x3a, 0x41, 0x5f, 0x13, 0xf7, 0x91,
	0x46, 0xbe, 0x06, 0x77, 0x2b, 0x8d, 0x49, 0xc1, 0xf2, 0x24, 0x66, 0x02, 0x13, 0xed, 0x04, 0x6b,
	0x15, 0x23, 0xd0, 0x74, 0xaf, 0x80, 0xcd, 0xdd, 0x62, 0x96, 0x4b, 0x9e, 0xd3, 0x2c, 0x0e, 0xf7,
	0x32, 0x59, 0xcc, 0xc6, 0x3a, 0xd8, 0x55, 0xed, 0x38, 0xf5, 0xda, 0xd9, 0x84, 0xa5, 0x82, 0x4d,
	0x63, 0x9e, 0x99, 0x92, 0x32, 0x58, 0xed, 0x8a, 0xcd, 0xfa, 0x15, 0x55, 0x38, 0x72, 0x2a, 0x4f,
	0x4d, 0x39, 0x21, 0xec, 0xfd, 0xd9, 0x81, 0x8d, 0xab, 0x87, 0x7e, 0xc1, 0x25, 0x13, 0x64, 0x0b,
	0x96, 0x33, 0x36, 0xa5, 0x32, 0x3e, 0xd3, 0xc7, 0xb6, 0x83, 0x0a, 0x57, 0xbc, 0x9c, 0x8b, 0x18,
	0x79, 0x0d, 0xcd, 0xb3, 0xb8, 0x8a, 0x5a, 0x9c, 0xe6, 0xbc, 0x90, 0xd4, 0xd4, 0x74, 0x3b, 0x98,
	0x13, 0x74, 0xb2, 0xdf, 0xb2, 0x08, 0x9d, 0x68, 0x07, 0x1a, 0x51, 0xf6, 0xa2, 0x58, 0x68, 0x46,
	0x5b, 0xdb, 0xb3, 0x38, 0x59, 0x83, 0x66, 0xc2, 0x13, 0x2c, 0xd9, 0x76, 0xa0, 0x40, 0x8c, 0x06,
	0xbf, 0x88, 0x43, 0xac, 0xc8, 0x76, 0xa0, 0x11, 0x45, 0x15, 0xf4, 0x8c, 0x45, 0x58, 0x8e, 0xed,
	0x40, 0x23, 0xde, 0x17, 0xe0, 0x5e, 0xbd, 0xde, 0x01, 0x93, 0x34, 0xa2, 0x92, 0xaa, 0x12, 0x4e,
	0x99, 0x10, 0x74, 0x6a, 0xe3, 0x6a, 0x51, 0xb2, 0x0d, 0xbd, 0x88, 0x89, 0xb0, 0x88, 0x73, 0x39,
	0x0f, 0x6f, 0x9d, 0xe4, 0xfd, 0xb5, 0x01, 0xeb, 0x35, 0xc3, 0x01, 0x3d, 0x47, 0xdb, 0x2a, 0xc6,
	0x6f, 0xe3, 0xcc, 0xbe, 0x7b, 0x84, 0x6b, 0xf9, 0x68, 0x5c, 0xca, 0xc7, 0x4e, 0xf5, 0xb4, 0x9a,
	0xf8, 0x1e, 0xef, 0xfb, 0x8b, 0xd3, 0x5f, 0xbd, 0xb9, 0xaa, 0x0c, 0x5a, 0xf5, 0x32, 0xf8, 0x0a,
	0xf4, 0xf3, 0xf2, 0x24, 0x89, 0xc5, 0x29, 0x8b, 0x26, 0x54, 0x62, 0x00, 0xbb, 0x41, 0xaf, 0xa2,
	0x8d, 0xf4, 0x43, 0x48, 0xca, 0x29, 0x06, 0xb1, 0x1b, 0x20, 0x6c, 0xfa, 0x93, 0x0e, 0xa1, 0xea,
	0x4f, 0x6b, 0xd0, 0x2c, 0x8b, 0xc4, 0x3c, 0x66, 0x05, 0x92, 0x0f, 0x00, 0x4c, 0x17, 0x50, 0x66,
	0xbb, 0xc8, 0xe8, 0x1a, 0xca, 0x48, 0x92, 0x4f, 0xa0, 0x7d, 0xa6, 0x2a, 0xc5, 0x05, 0xf4, 0x7e,
	0xd3, 0x5f, 0x58, 0x47, 0x81, 0x16, 0x52, 0x4d, 0x2b, 0x35, 0x81, 0x77, 0x7b, 0xa8, 0xf0, 0xc0,
	0xbf, 0x29, 0x33, 0x41, 0x25, 0xea, 0xfd, 0x10, 0x56, 0x6b, 0x52, 0x9f, 0x33, 0x86, 0x8d, 0x34,
	0xe4, 0xa5, 0x79, 0x92, 0xed, 0x40, 0x23, 0xc4, 0x87, 0x4e, 0xc1, 0x44, 0x99, 0x48, 0xe1, 0x36,
	0xb6, 0x9b, 0x8f, 0x7a, 0xc3, 0x7b, 0xfe, 0x82, 0xfc, 0x04, 0x56, 0xc8, 0xfb, 0xd9, 0x25, 0xc3,
	0xaf, 0xb8, 0x90, 0xe4, 0x05, 0x6c, 0x84, 0x73, 0xd2, 0xa4, 0xa0, 0xe7, 0x13, 0xa6, 0x94, 0xf0,
	0xa0, 0x9b, 0x0c, 0xae, 0x87, 0x0b, 0xaa, 0xc0, 0x83, 0x0e, 0x2d, 0x64, 0x1c, 0x9a, 0x6e, 0xdf,
	0x1b, 0x2e, 0xfb, 0x23, 0x8d, 0x07, 0x96, 0xe1, 0x9d, 0xc3, 0xc6, 0x21, 0x4d, 0x59, 0xb4, 0x97,
	0xc9, 0x58, 0xce, 0x8e, 0xc2, 0xb0, 0x2c, 0x0a, 0x96, 0x85, 0x8c, 0x78, 0xd0, 0x4e, 0xe8, 0x09,
	0x4b, 0xf0, 0xd8, 0x95, 0x61, 0xdf, 0xaf, 0x89, 0x05, 0x9a, 0x85, 0xc5, 0x2e, 0x69, 0xa1, 0x9b,
	0xce, 0x20, 0xd0, 0x88, 0x4a, 0x21, 0xcb, 0x22, 0xac, 0xa6, 0x41, 0xa0, 0x40, 0x95, 0x78, 0xc9,
	0x2e, 0xa4, 0x7d, 0xf2, 0x0a, 0xf6, 0xfe, 0xd2, 0x02, 0x32, 0x37, 0x19, 0x33, 0xa1, 0xbb, 0x9d,
	0x0b, 0x1d, 0x31, 0x4b, 0x4f, 0x78, 0x22, 0x5c, 0x07, 0x1b, 0xb1, 0x45, 0x89, 0x0f, 0x4b, 0x54,
	0x08, 0x56, 0x45, 0x76, 0xd3, 0x5f, 0xe8, 0x78, 0x60, 0xa4, 0xc8, 0xa7, 0xd0, 0xc9, 0x59, 0x21,
	0x78, 0xa6, 0x5a, 0xdd, 0x6d, 0x0a, 0x56, 0x8c, 0x3c, 0x81, 0x6e, 0xc8, 0x53, 0x15, 0x43, 0x26,
	0xdc, 0xd6, 0xad, 0x3a, 0x73, 0x41, 0xf2, 0x5d, 0x18, 0xf0, 0x62, 0x4a, 0xb3, 0xf8, 0x1d, 0x55,
	0x6f, 0x52, 0xb8, 0xed, 0x5b, 0x35, 0x2f, 0x0b, 0xab, 0x33, 0x13, 0x1e, 0x1a, 0xcd, 0xa5, 0xdb,
	0xcf, 0xac, 0x04, 0x95, 0x16, 0xbb, 0x08, 0x4f, 0x69, 0xa6, 0xe6, 0x58, 0xe7, 0x76, 0xad, 0x4a,
	0x90, 0x3c, 0x86, 0x56, 0x1a, 0x8b, 0xd0, 0x5d, 0xbe, 0x55, 0x01, 0x65, 0x30, 0x65, 0x74, 0x6a,
	0x87, 0x27, 0xc2, 0xe4, 0x00, 0x56, 0x30, 0xb6, 0x13, 0x35, 0x2e, 0xd0, 0x61, 0x40, 0x4b, 0x5f,
	0xf5, 0xaf, 0x27, 0xd2, 0x1f, 0x29, 0xc9, 0x03, 0x23, 0xa8, 0x8b, 0x74, 0x40, 0xeb, 0x34, 0xf2,
	0x21, 0xf4, 0x74, 0x47, 0x99, 0x60, 0x71, 0xf4, 0xb0, 0x38, 0x40, 0x93, 0x8e, 0xd9, 0x85, 0xdc,
	0xfa, 0x1e, 0x90, 0xeb, 0x56, 0x54, 0x79, 0xbd, 0x65, 0x33, 0xd3, 0xda, 0x14, 0xa8, 0xca, 0xf0,
	0x8c, 0x26, 0xa5, 0x1d, 0x02, 0x1a, 0x79, 0xda, 0xf8, 0xb6, 0xe3, 0xfd, 0xc9, 0x81, 0x8e, 0x29,
	0x79, 0xf2, 0x10, 0x5a, 0x27, 0x54, 0x30, 0xf3, 0x8c, 0xc0, 0xaf, 0x76, 0xa4, 0x00, 0xe9, 0xe4,
	0xeb, 0xf5, 0x39, 0xab, 0xdf, 0xcb, 0xaa, 0x7f, 0x79, 0x16, 0xd7, 0x07, 0xef, 0x53, 0x58, 0xc9,
	0xd4, 0xad, 0xd5, 0xe3, 0xc4, 0x6b, 0x9b, 0xf6, 0xb9, 0xbe, 0x20, 0x18, 0xc1, 0x20, 0xab, 0xd3,
	0xc8, 0x10, 0x00, 0x9b, 0xe6, 0x04, 0xfb, 0x50, 0xeb, 0x66, 0xbd, 0x2e, 0x8a, 0x3d, 0x53, 0x2d,
	0xe8, 0x8f, 0x0e, 0xf4, 0x5e, 0x0b, 0x56, 0x1c, 0x98, 0xe1, 0xf0, 0x5f, 0x74, 0x1d, 0x02, 0xad,
	0x52, 0x54, 0x0b, 0x22, 0xc2, 0xf5, 0xa9, 0xd6, 0xbe, 0x34, 0xd5, 0xbc, 0xdf, 0xb7, 0x60, 0xb5,
	0xf2, 0x63, 0x97, 0x66, 0x51, 0xc2, 0xae, 0x6d, 0xa9, 0xdf, 0x01, 0xc0, 0x5e, 0x32, 0x51, 0x52,
	0xc6, 0xfb, 0xdb, 0xf6, 0xc4, 0x2e, 0x4a, 0x2b, 0x9c, 0x3c, 0x04, 0x28, 0x98, 0xe0, 0x49, 0x89,
	0x33, 0x53, 0xaf, 0x1e, 0x35, 0x8a, 0x2a, 0x16, 0x2c, 0x43, 0x3b, 0xbd, 0x10, 0x51, 0xd3, 0xcb,
	0xae, 0x15, 0x13, 0x51, 0xa6, 0xe8, 0xb3, 0x13, 0xf4, 0x2c, 0x6d, 0x5c, 0xa6, 0xe4, 0x63, 0x58,
	0xa9, 0x44, 0x74, 0xe7, 0xd7, 0xcb, 0xc0, 0xc0, 0x52, 0x77, 0x71, 0x02, 0xa8, 0x39, 0x68, 0x96,
	0x10, 0xb4, 0xd4, 0xd1, 0x96, 0x2c, 0xcd, 0x58, 0xaa, 0x44, 0xb4, 0x25, 0xbd, 0x2c, 0x0c, 0x2c,
	0x55, 0x5b, 0xfa, 0x08, 0x06, 0xf3, 0xad, 0x8d, 0x9e, 0x4d, 0x71, 0xf6, 0x39, 0x41, 0xbf, 0x22,
	0x8e, 0xce, 0xa6, 0xe4, 0x09, 0x6c, 0xf2, 0x9c, 0x65, 0x93, 0xba, 0x24, 0x2b, 0x54, 0xd8, 0x01,
	0xa5, 0xef, 0x29, 0xee, 0x78, 0xae, 0x81, 0x3c, 0xa5, 0x75, 0x1a, 0x4f, 0x4f, 0x17, 0x68, 0xf5,
	0xb4, 0x96, 0xe2, 0x5e, 0xd3, 0x1a, 0xc2, 0x46, 0xc2, 0xcf, 0x17, 0x28, 0xf5, 0x51, 0x69, 0x3d,
	0xe1, 0xe7, 0xd7, 0x74, 0x3e, 0x83, 0xfb, 0x61, 0xc2, 0x05, 0x5b, 0xa0, 0x35, 0x40, 0xad, 0x0d,
	0x64, 0x5f, 0xd3, 0x73, 0xa1, 0x53, 0xe6, 0x11, 0x7e, 0x26, 0xa8, 0x6d, 0x7a, 0x39, 0xb0, 0xa8,
	0xb7, 0x07, 0x7d, 0xec, 0x0a, 0xe2, 0xf3, 0x38, 0x91, 0xac, 0xc0, 0x15, 0x5d, 0xcf, 0x85, 0x96,
	0x5e, 0xe8, 0x4d, 0xff, 0xff, 0x00, 0x80, 0x26, 0xc9, 0xc4, 0xf0, 0xda, 0x68, 0xa4, 0x4b, 0x93,
	0x44, 0x2b, 0x7b, 0x29, 0xdc, 0x1f, 0x4d, 0xa7, 0x05, 0xe6, 0x8e, 0x67, 0xba, 0x0e, 0x8d, 0xc5,
	0xcb, 0x25, 0xe4, 0x5c, 0x2b, 0xa1, 0x21, 0xe8, 0x4e, 0x26, 0x26, 0x6f, 0x50, 0xc1, 0x14, 0xe8,
	0xc0, 0xaf, 0xfb, 0x15, 0xf4, 0x69, 0x0d, 0xf3, 0x7e, 0xed, 0x80, 0x5b, 0x5d, 0xf2, 0x45, 0x2c,
	0x24, 0x2f, 0xe2, 0x30, 0x60, 0x3f, 0x29, 0x99, 0x50, 0x5b, 0x43, 0xeb, 0x4d, 0xc1, 0x53, 0xf3,
	0x96, 0x6f, 0x2b, 0x74, 0x94, 0x23, 0x8f, 0xa1, 0x21, 0xf9, 0xdf, 0xf1, 0x2c, 0x1a, 0x92, 0xff,
	0x73, 0xef, 0xc1, 0xfb, 0xa5, 0x03, 0xab, 0xff, 0x49, 0x2f, 0x3f, 0x86, 0x25, 0x13, 0xcb, 0xd6,
	0xa2, 0x58, 0x1a, 0xa6, 0xf7, 0x1c, 0xda, 0x48, 0x57, 0x2d, 0x47, 0xf5, 0x20, 0xbb, 0xe0, 0x2a,
	0x18, 0xbf, 0x11, 0x71, 0x57, 0xb0, 0x0b, 0xae, 0xc6, 0x94, 0x6c, 0xc8, 0x23, 0x66, 0xee, 0x8e,
	0xb0, 0xf7, 0x09, 0x00, 0x1a, 0xda, 0x97, 0x2c, 0x15, 0xe4, 0x61, 0x55, 0x42, 0x0e, 0x0e, 0xb4,
	0x25, 0x7d, 0xba, 0x2d, 0x25, 0xef, 0x77, 0x0d, 0xe8, 0x1d, 0x17, 0x34, 0x13, 0x34, 0xc4, 0x98,
	0x5d, 0x6d, 0x57, 0x04, 0x5a, 0xa7, 0x54, 0x9c, 0x9a, 0x73, 0x11, 0x56, 0x7d, 0x40, 0x45, 0x61,
	0x42, 0xa3, 0xa8, 0x60, 0x42, 0x98, 0xd3, 0x7b, 0x8a, 0x36, 0xd2, 0x24, 0x55, 0xa1, 0x92, 0x57,
	0x02, 0x3a, 0xfe, 0x5d, 0xc9, 0x6b, 0x6c, 0xb4, 0xc0, 0xcf, 0x33, 0x56, 0x98, 0x2e, 0xda, 0x55,
	0x94, 0x23, 0x45, 0x20, 0x0f, 0x60, 0x59, 0x72, 0xc3, 0xd4, 0x1b, 0x75, 0x47, 0x72, 0xcd, 0xf2,
	0xa1, 0x85, 0x8d, 0xb3, 0xf3, 0xfe, 0x4c, 0x29, 0x39, 0xfd, 0xf9, 0x9f, 0xe2, 0xa4, 0x58, 0xb6,
	0x9f, 0xff, 0x88, 0xce, 0xab, 0xa3, 0x5b, 0xef, 0x96, 0x6a, 0x91, 0x8f, 0xdf, 0xd9, 0x16, 0x83,
	0xb0, 0x72, 0xe7, 0xf5, 0xf8, 0xd9, 0x04, 0xe9, 0xba, 0x89, 0x74, 0x5e, 0x8f, 0x9f, 0x8d, 0xe3,
	0x77, 0xcc, 0xe3, 0xd0, 0x1e, 0x4d, 0xa7, 0xfb, 0x18, 0xa7, 0x19, 0xa3, 0x85, 0x59, 0x99, 0x11,
	0x56, 0x27, 0xa4, 0x3c, 0x93, 0xa7, 0x76, 0x78, 0x23, 0xa2, 0x86, 0x7c, 0x44, 0x67, 0xe6, 0xc3,
	0x4d, 0x81, 0x18, 0x63, 0x5e, 0x16, 0xe6, 0x8b, 0x0d, 0x61, 0x95, 0xf1, 0x34, 0xce, 0x4a, 0xf3,
	0x03, 0xa2, 0x1d, 0x18, 0xcc, 0xfb, 0x8d, 0x03, 0x77, 0xaf, 0x3d, 0x6e, 0xb2, 0x59, 0x65, 0x0d,
	0x33, 0xac, 0x3c, 0xb2, 0xbf, 0x44, 0xf4, 0x1d, 0x1b, 0xf5, 0x3b, 0xbe, 0xef, 0xdd, 0xac, 0x40,
	0x23, 0x3f, 0x43, 0x6f, 0x9a, 0x41, 0x23, 0x3f, 0x53, 0x78, 0x76, 0x86, 0x7e, 0x34, 0x83, 0x46,
	0x86, 0x78, 0x2e, 0x30, 0x31, 0x4e, 0xd0, 0xc8, 0x05, 0xf2, 0x85, 0x99, 0x06, 0x8d, 0x4c, 0x90,
	0x3e, 0x38, 0x14, 0xa3, 0xed, 0x04, 0x0e, 0xf5, 0x7e, 0xd1, 0x84, 0xde, 0x2b, 0xf5, 0xa9, 0x14,
	0xfe, 0x7b, 0x7e, 0xdb, 0xfc, 0xaf, 0xfc, 0x9c, 0x59, 0xf4, 0x13, 0x85, 0x7c, 0x06, 0xc0, 0x2e,
	0x24, 0xcb, 0x04, 0xee, 0xa8, 0x91, 0xf9, 0x2e, 0xac, 0x85, 0x77, 0xaf, 0xe2, 0x06, 0x35, 0x49,
	0x6f, 0x07, 0x36, 0x16, 0x0a, 0xd5, 0x46, 0x8c, 0x53, 0x1f, 0x31, 0x8f, 0x7f, 0xe5, 0x40, 0xaf,
	0xb6, 0x44, 0x93, 0x35, 0xe8, 0x8f, 0xc6, 0xe3, 0xbd, 0xe3, 0xc9, 0xde, 0xe1, 0xf1, 0xfe, 0xf1,
	0x97, 0x6b, 0x77, 0xc8, 0x5d, 0x18, 0xbc, 0xda, 0x0b, 0xc6, 0x47, 0x87, 0x96, 0xe4, 0x90, 0x75,
	0x58, 0x7d, 0x79, 0xb4, 0x3b, 0x3a, 0xde, 0x9f, 0x13, 0x1b, 0x84, 0xc0, 0xca, 0xee, 0xd1, 0xc1,
	0xab, 0xd1, 0xe1, 0x97, 0x96, 0xd6, 0x54, 0x82, 0x7b, 0x3f, 0xda, 0x7d, 0x31, 0x3a, 0x7c, 0xbe,
	0x67, 0x89, 0x2d, 0xb2, 0x0a, 0xbd, 0x83, 0xfd, 0xf1, 0xae, 0x25, 0xb4, 0xc9, 0x7d, 0x58, 0x3f,
	0x0a, 0x9e, 0x8f, 0x0e, 0xf7, 0x7f, 0x7c, 0xc9, 0xe4, 0xd2, 0x70, 0x06, 0x03, 0xb3, 0x2b, 0x8a,
	0x57, 0x05, 0xbf, 0x98, 0x91, 0x6f, 0xc1, 0xbd, 0x71, 0x79, 0x22, 0xc2, 0x22, 0x3e, 0x61, 0x6a,
	0x5b, 0xb4, 0x8b, 0xf1, 0xe5, 0x5e, 0xbb, 0xd5, 0xaf, 0x47, 0xca, 0xbb, 0xf3, 0xa9, 0x43, 0x76,
	0x60, 0xad, 0x52, 0xbc, 0x41, 0xa9, 0xfa, 0xb2, 0x54, 0x0a, 0xc3, 0xa7, 0xd0, 0x51, 0x3b, 0xab,
	0x7a, 0x46, 0x3b, 0xb0, 0xa4, 0x05, 0xc9, 0xe6, 0xb5, 0x52, 0xda, 0x4b, 0x73, 0x39, 0xdb, 0xea,
	0xf9, 0xf3, 0x4e, 0xec, 0xdd, 0x19, 0xfe, 0x14, 0xfa, 0x76, 0xf0, 0x28, 0x1b, 0xe4, 0x29, 0xdc,
	0xb3, 0x78, 0xcd, 0x69, 0x41, 0xd6, 0xfc, 0x2b, 0xf3, 0x69, 0x81, 0xe3, 0x43, 0x58, 0xb3, 0x42,
	0xb7, 0xe8, 0x5d, 0xf6, 0xfd, 0x0f, 0x0d, 0x80, 0x6a, 0x50, 0x0b, 0xf2, 0x12, 0xee, 0x5b, 0xf9,
	0x31, 0x0f, 0x63, 0x9a, 0x54, 0x3c, 0xf2, 0xc0, 0xbf, 0x69, 0xa0, 0x6f, 0x11, 0xff, 0x5a, 0xfb,
	0x41, 0x87, 0x7e, 0x00, 0x1b, 0x56, 0xf4, 0x90, 0x9d, 0x8b, 0x7f, 0xc9, 0xd6, 0x4b, 0x70, 0xab,
	0xac, 0x5c, 0x75, 0xcd, 0xf5, 0x6f, 0xd8, 0x6d, 0x6e, 0xf1, 0x6c, 0xb3, 0xb2, 0x76, 0xd9, 0xb5,
	0x7f, 0xd8, 0xd6, 0xc9, 0x12, 0x66, 0xf8, 0x1b, 0x7f, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x48, 0x42,
	0x8e, 0xf0, 0xd5, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessagesProxyClient is the client API for MessagesProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagesProxyClient interface {
	SubscribeBaseArticle(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeBaseArticleClient, error)
	SubscribeArticle(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeArticleClient, error)
}

type messagesProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagesProxyClient(cc grpc.ClientConnInterface) MessagesProxyClient {
	return &messagesProxyClient{cc}
}

func (c *messagesProxyClient) SubscribeBaseArticle(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeBaseArticleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessagesProxy_serviceDesc.Streams[0], "/MessagesProxy/SubscribeBaseArticle", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeBaseArticleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeBaseArticleClient interface {
	Recv() (*PublicModel, error)
	grpc.ClientStream
}

type messagesProxySubscribeBaseArticleClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeBaseArticleClient) Recv() (*PublicModel, error) {
	m := new(PublicModel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagesProxyClient) SubscribeArticle(ctx context.Context, in *AssetsFilter, opts ...grpc.CallOption) (MessagesProxy_SubscribeArticleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessagesProxy_serviceDesc.Streams[1], "/MessagesProxy/SubscribeArticle", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagesProxySubscribeArticleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagesProxy_SubscribeArticleClient interface {
	Recv() (*Article, error)
	grpc.ClientStream
}

type messagesProxySubscribeArticleClient struct {
	grpc.ClientStream
}

func (x *messagesProxySubscribeArticleClient) Recv() (*Article, error) {
	m := new(Article)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagesProxyServer is the server API for MessagesProxy service.
type MessagesProxyServer interface {
	SubscribeBaseArticle(*AssetsFilter, MessagesProxy_SubscribeBaseArticleServer) error
	SubscribeArticle(*AssetsFilter, MessagesProxy_SubscribeArticleServer) error
}

// UnimplementedMessagesProxyServer can be embedded to have forward compatible implementations.
type UnimplementedMessagesProxyServer struct {
}

func (*UnimplementedMessagesProxyServer) SubscribeBaseArticle(req *AssetsFilter, srv MessagesProxy_SubscribeBaseArticleServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBaseArticle not implemented")
}
func (*UnimplementedMessagesProxyServer) SubscribeArticle(req *AssetsFilter, srv MessagesProxy_SubscribeArticleServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeArticle not implemented")
}

func RegisterMessagesProxyServer(s *grpc.Server, srv MessagesProxyServer) {
	s.RegisterService(&_MessagesProxy_serviceDesc, srv)
}

func _MessagesProxy_SubscribeBaseArticle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssetsFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeBaseArticle(m, &messagesProxySubscribeBaseArticleServer{stream})
}

type MessagesProxy_SubscribeBaseArticleServer interface {
	Send(*PublicModel) error
	grpc.ServerStream
}

type messagesProxySubscribeBaseArticleServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeBaseArticleServer) Send(m *PublicModel) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagesProxy_SubscribeArticle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssetsFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagesProxyServer).SubscribeArticle(m, &messagesProxySubscribeArticleServer{stream})
}

type MessagesProxy_SubscribeArticleServer interface {
	Send(*Article) error
	grpc.ServerStream
}

type messagesProxySubscribeArticleServer struct {
	grpc.ServerStream
}

func (x *messagesProxySubscribeArticleServer) Send(m *Article) error {
	return x.ServerStream.SendMsg(m)
}

var _MessagesProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MessagesProxy",
	HandlerType: (*MessagesProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeBaseArticle",
			Handler:       _MessagesProxy_SubscribeBaseArticle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeArticle",
			Handler:       _MessagesProxy_SubscribeArticle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}

// DatasetClient is the client API for Dataset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatasetClient interface {
	Assets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AssetItems, error)
}

type datasetClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetClient(cc grpc.ClientConnInterface) DatasetClient {
	return &datasetClient{cc}
}

func (c *datasetClient) Assets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AssetItems, error) {
	out := new(AssetItems)
	err := c.cc.Invoke(ctx, "/Dataset/Assets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetServer is the server API for Dataset service.
type DatasetServer interface {
	Assets(context.Context, *empty.Empty) (*AssetItems, error)
}

// UnimplementedDatasetServer can be embedded to have forward compatible implementations.
type UnimplementedDatasetServer struct {
}

func (*UnimplementedDatasetServer) Assets(ctx context.Context, req *empty.Empty) (*AssetItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assets not implemented")
}

func RegisterDatasetServer(s *grpc.Server, srv DatasetServer) {
	s.RegisterService(&_Dataset_serviceDesc, srv)
}

func _Dataset_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServer).Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dataset/Assets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServer).Assets(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dataset_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Dataset",
	HandlerType: (*DatasetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Assets",
			Handler:    _Dataset_Assets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// HistoricDataClient is the client API for HistoricData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HistoricDataClient interface {
	HistoricBaseArticles(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (HistoricData_HistoricBaseArticlesClient, error)
	HistoricArticles(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (HistoricData_HistoricArticlesClient, error)
}

type historicDataClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoricDataClient(cc grpc.ClientConnInterface) HistoricDataClient {
	return &historicDataClient{cc}
}

func (c *historicDataClient) HistoricBaseArticles(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (HistoricData_HistoricBaseArticlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HistoricData_serviceDesc.Streams[0], "/HistoricData/HistoricBaseArticles", opts...)
	if err != nil {
		return nil, err
	}
	x := &historicDataHistoricBaseArticlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HistoricData_HistoricBaseArticlesClient interface {
	Recv() (*PublicModel, error)
	grpc.ClientStream
}

type historicDataHistoricBaseArticlesClient struct {
	grpc.ClientStream
}

func (x *historicDataHistoricBaseArticlesClient) Recv() (*PublicModel, error) {
	m := new(PublicModel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *historicDataClient) HistoricArticles(ctx context.Context, in *HistoricRequest, opts ...grpc.CallOption) (HistoricData_HistoricArticlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HistoricData_serviceDesc.Streams[1], "/HistoricData/HistoricArticles", opts...)
	if err != nil {
		return nil, err
	}
	x := &historicDataHistoricArticlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HistoricData_HistoricArticlesClient interface {
	Recv() (*Article, error)
	grpc.ClientStream
}

type historicDataHistoricArticlesClient struct {
	grpc.ClientStream
}

func (x *historicDataHistoricArticlesClient) Recv() (*Article, error) {
	m := new(Article)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HistoricDataServer is the server API for HistoricData service.
type HistoricDataServer interface {
	HistoricBaseArticles(*HistoricRequest, HistoricData_HistoricBaseArticlesServer) error
	HistoricArticles(*HistoricRequest, HistoricData_HistoricArticlesServer) error
}

// UnimplementedHistoricDataServer can be embedded to have forward compatible implementations.
type UnimplementedHistoricDataServer struct {
}

func (*UnimplementedHistoricDataServer) HistoricBaseArticles(req *HistoricRequest, srv HistoricData_HistoricBaseArticlesServer) error {
	return status.Errorf(codes.Unimplemented, "method HistoricBaseArticles not implemented")
}
func (*UnimplementedHistoricDataServer) HistoricArticles(req *HistoricRequest, srv HistoricData_HistoricArticlesServer) error {
	return status.Errorf(codes.Unimplemented, "method HistoricArticles not implemented")
}

func RegisterHistoricDataServer(s *grpc.Server, srv HistoricDataServer) {
	s.RegisterService(&_HistoricData_serviceDesc, srv)
}

func _HistoricData_HistoricBaseArticles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistoricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HistoricDataServer).HistoricBaseArticles(m, &historicDataHistoricBaseArticlesServer{stream})
}

type HistoricData_HistoricBaseArticlesServer interface {
	Send(*PublicModel) error
	grpc.ServerStream
}

type historicDataHistoricBaseArticlesServer struct {
	grpc.ServerStream
}

func (x *historicDataHistoricBaseArticlesServer) Send(m *PublicModel) error {
	return x.ServerStream.SendMsg(m)
}

func _HistoricData_HistoricArticles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HistoricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HistoricDataServer).HistoricArticles(m, &historicDataHistoricArticlesServer{stream})
}

type HistoricData_HistoricArticlesServer interface {
	Send(*Article) error
	grpc.ServerStream
}

type historicDataHistoricArticlesServer struct {
	grpc.ServerStream
}

func (x *historicDataHistoricArticlesServer) Send(m *Article) error {
	return x.ServerStream.SendMsg(m)
}

var _HistoricData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HistoricData",
	HandlerType: (*HistoricDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HistoricBaseArticles",
			Handler:       _HistoricData_HistoricBaseArticles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HistoricArticles",
			Handler:       _HistoricData_HistoricArticles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}

// SentimentsClient is the client API for Sentiments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SentimentsClient interface {
	HistoricSocialSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (Sentiments_HistoricSocialSentimentClient, error)
	HistoricNewsSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (Sentiments_HistoricNewsSentimentClient, error)
	SubscribeSocialSentiment(ctx context.Context, in *AggregationCandleFilter, opts ...grpc.CallOption) (Sentiments_SubscribeSocialSentimentClient, error)
	SubscribeNewsSentiment(ctx context.Context, in *AggregationCandleFilter, opts ...grpc.CallOption) (Sentiments_SubscribeNewsSentimentClient, error)
}

type sentimentsClient struct {
	cc grpc.ClientConnInterface
}

func NewSentimentsClient(cc grpc.ClientConnInterface) SentimentsClient {
	return &sentimentsClient{cc}
}

func (c *sentimentsClient) HistoricSocialSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (Sentiments_HistoricSocialSentimentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sentiments_serviceDesc.Streams[0], "/Sentiments/HistoricSocialSentiment", opts...)
	if err != nil {
		return nil, err
	}
	x := &sentimentsHistoricSocialSentimentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sentiments_HistoricSocialSentimentClient interface {
	Recv() (*AggregationCandle, error)
	grpc.ClientStream
}

type sentimentsHistoricSocialSentimentClient struct {
	grpc.ClientStream
}

func (x *sentimentsHistoricSocialSentimentClient) Recv() (*AggregationCandle, error) {
	m := new(AggregationCandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sentimentsClient) HistoricNewsSentiment(ctx context.Context, in *SentimentHistoricRequest, opts ...grpc.CallOption) (Sentiments_HistoricNewsSentimentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sentiments_serviceDesc.Streams[1], "/Sentiments/HistoricNewsSentiment", opts...)
	if err != nil {
		return nil, err
	}
	x := &sentimentsHistoricNewsSentimentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sentiments_HistoricNewsSentimentClient interface {
	Recv() (*AggregationCandle, error)
	grpc.ClientStream
}

type sentimentsHistoricNewsSentimentClient struct {
	grpc.ClientStream
}

func (x *sentimentsHistoricNewsSentimentClient) Recv() (*AggregationCandle, error) {
	m := new(AggregationCandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sentimentsClient) SubscribeSocialSentiment(ctx context.Context, in *AggregationCandleFilter, opts ...grpc.CallOption) (Sentiments_SubscribeSocialSentimentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sentiments_serviceDesc.Streams[2], "/Sentiments/SubscribeSocialSentiment", opts...)
	if err != nil {
		return nil, err
	}
	x := &sentimentsSubscribeSocialSentimentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sentiments_SubscribeSocialSentimentClient interface {
	Recv() (*AggregationCandle, error)
	grpc.ClientStream
}

type sentimentsSubscribeSocialSentimentClient struct {
	grpc.ClientStream
}

func (x *sentimentsSubscribeSocialSentimentClient) Recv() (*AggregationCandle, error) {
	m := new(AggregationCandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sentimentsClient) SubscribeNewsSentiment(ctx context.Context, in *AggregationCandleFilter, opts ...grpc.CallOption) (Sentiments_SubscribeNewsSentimentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sentiments_serviceDesc.Streams[3], "/Sentiments/SubscribeNewsSentiment", opts...)
	if err != nil {
		return nil, err
	}
	x := &sentimentsSubscribeNewsSentimentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sentiments_SubscribeNewsSentimentClient interface {
	Recv() (*AggregationCandle, error)
	grpc.ClientStream
}

type sentimentsSubscribeNewsSentimentClient struct {
	grpc.ClientStream
}

func (x *sentimentsSubscribeNewsSentimentClient) Recv() (*AggregationCandle, error) {
	m := new(AggregationCandle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SentimentsServer is the server API for Sentiments service.
type SentimentsServer interface {
	HistoricSocialSentiment(*SentimentHistoricRequest, Sentiments_HistoricSocialSentimentServer) error
	HistoricNewsSentiment(*SentimentHistoricRequest, Sentiments_HistoricNewsSentimentServer) error
	SubscribeSocialSentiment(*AggregationCandleFilter, Sentiments_SubscribeSocialSentimentServer) error
	SubscribeNewsSentiment(*AggregationCandleFilter, Sentiments_SubscribeNewsSentimentServer) error
}

// UnimplementedSentimentsServer can be embedded to have forward compatible implementations.
type UnimplementedSentimentsServer struct {
}

func (*UnimplementedSentimentsServer) HistoricSocialSentiment(req *SentimentHistoricRequest, srv Sentiments_HistoricSocialSentimentServer) error {
	return status.Errorf(codes.Unimplemented, "method HistoricSocialSentiment not implemented")
}
func (*UnimplementedSentimentsServer) HistoricNewsSentiment(req *SentimentHistoricRequest, srv Sentiments_HistoricNewsSentimentServer) error {
	return status.Errorf(codes.Unimplemented, "method HistoricNewsSentiment not implemented")
}
func (*UnimplementedSentimentsServer) SubscribeSocialSentiment(req *AggregationCandleFilter, srv Sentiments_SubscribeSocialSentimentServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSocialSentiment not implemented")
}
func (*UnimplementedSentimentsServer) SubscribeNewsSentiment(req *AggregationCandleFilter, srv Sentiments_SubscribeNewsSentimentServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNewsSentiment not implemented")
}

func RegisterSentimentsServer(s *grpc.Server, srv SentimentsServer) {
	s.RegisterService(&_Sentiments_serviceDesc, srv)
}

func _Sentiments_HistoricSocialSentiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SentimentHistoricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentimentsServer).HistoricSocialSentiment(m, &sentimentsHistoricSocialSentimentServer{stream})
}

type Sentiments_HistoricSocialSentimentServer interface {
	Send(*AggregationCandle) error
	grpc.ServerStream
}

type sentimentsHistoricSocialSentimentServer struct {
	grpc.ServerStream
}

func (x *sentimentsHistoricSocialSentimentServer) Send(m *AggregationCandle) error {
	return x.ServerStream.SendMsg(m)
}

func _Sentiments_HistoricNewsSentiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SentimentHistoricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentimentsServer).HistoricNewsSentiment(m, &sentimentsHistoricNewsSentimentServer{stream})
}

type Sentiments_HistoricNewsSentimentServer interface {
	Send(*AggregationCandle) error
	grpc.ServerStream
}

type sentimentsHistoricNewsSentimentServer struct {
	grpc.ServerStream
}

func (x *sentimentsHistoricNewsSentimentServer) Send(m *AggregationCandle) error {
	return x.ServerStream.SendMsg(m)
}

func _Sentiments_SubscribeSocialSentiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AggregationCandleFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentimentsServer).SubscribeSocialSentiment(m, &sentimentsSubscribeSocialSentimentServer{stream})
}

type Sentiments_SubscribeSocialSentimentServer interface {
	Send(*AggregationCandle) error
	grpc.ServerStream
}

type sentimentsSubscribeSocialSentimentServer struct {
	grpc.ServerStream
}

func (x *sentimentsSubscribeSocialSentimentServer) Send(m *AggregationCandle) error {
	return x.ServerStream.SendMsg(m)
}

func _Sentiments_SubscribeNewsSentiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AggregationCandleFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SentimentsServer).SubscribeNewsSentiment(m, &sentimentsSubscribeNewsSentimentServer{stream})
}

type Sentiments_SubscribeNewsSentimentServer interface {
	Send(*AggregationCandle) error
	grpc.ServerStream
}

type sentimentsSubscribeNewsSentimentServer struct {
	grpc.ServerStream
}

func (x *sentimentsSubscribeNewsSentimentServer) Send(m *AggregationCandle) error {
	return x.ServerStream.SendMsg(m)
}

var _Sentiments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Sentiments",
	HandlerType: (*SentimentsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HistoricSocialSentiment",
			Handler:       _Sentiments_HistoricSocialSentiment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HistoricNewsSentiment",
			Handler:       _Sentiments_HistoricNewsSentiment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSocialSentiment",
			Handler:       _Sentiments_SubscribeSocialSentiment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeNewsSentiment",
			Handler:       _Sentiments_SubscribeNewsSentiment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}
